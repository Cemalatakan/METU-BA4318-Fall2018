# This is a better organized program.
# Import major libraries in the beginning
import math
x=5
y=7
z=8
# Let's do some math. + - * / are OK. % is modulus. 
x = ((x * x) % 3) + y - 3 * (z / 3)
# Why do you think x changes its type from an integer to a float? 
print ("x is ", x)
# comparison operators <, >, <=, >=, ==, and != exist and return a boolean value
xlargerthany = x > y
print("x larger than y?: ", xlargerthany)
# operators and, or, not can be combined with these. 

# The boolean operators and, or, not exist.
a = True
b = False
print("a is: ", a, " B is: ", b)
print (" a and b is: ", a and b)
print (" a or b is: ", a or b)
print (" not a and b is: ", not a and b)

# the operator xor exists in many forms.
# != can be used only if we are sure the variables contain boolean variables
print (" a xor b is: ", a != b)

# the function logical_xor in the numpy library can be used more generic way
# but is the library numpy available? You might need to install. 
# from numpy import logical_xor
# print (" a xor b is: ", logical_xor(a,b) )

# or just import the default operator xor from the library operator 
from operator import xor
print (" a xor b is: ", xor(a,b) )


# note how the quotations can be used in defining strings
helloString1 = "This is 'Hello World' for BA4318."
helloString2 = 'This is another "Hello World" from BA4318'
print(helloString1, "\n", helloString2)

# All strings come with some nice functions
# Most common one is the split() function. 
splitHello = helloString1.split()
print("This is a list generated by the split() function:", splitHello)
# We have another commonly used function called replace() 

# The None constant assigns an empty value to a variable
x = None
print("x is ", x)
# Variables with None value can not be used in operations.
# Suppose we uncommented the following line assigning x*x to y. 
# Compiler would issue an error message saying "TypeError" 
# y = x * x
# Let's re-assign a value to x. 
x = 1

# Or even better. Let's get some user input for x.
x = input("x=? ")
print("x is ", x)
# input() ise used in Python 3
# in Python 2.x this used to be called raw_input()
# so if you see sample code just replace with input()


